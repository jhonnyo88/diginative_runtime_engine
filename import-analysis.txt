src/utils/monitoring-dashboard.tsx:import React, { useState, useEffect } from 'react';
src/utils/monitoring-dashboard.tsx:import { performanceAnalytics } from '../services/performance-analytics';
src/utils/monitoring-dashboard.tsx:import { captureMetric } from '../services/error-monitoring';
src/utils/contentValidation.test.ts:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/dev/DevShowcase.tsx:import React from 'react';
src/dev/DevShowcase.tsx:import { ComponentShowcase } from '../stories/ComponentShowcase';
src/demo/DigitaliseringsstrategiDemo.tsx:import React, { useState } from 'react';
src/demo/DigitaliseringsstrategiDemo.tsx:import { Box, Button, Text, VStack, Alert, AlertIcon, useToast, HStack, Heading, Badge, Card, CardBody } from '@chakra-ui/react';
src/demo/DigitaliseringsstrategiDemo.tsx:import { StrategyPlayHost } from '../components/StrategyPlayHost';
src/demo/DigitaliseringsstrategiDemo.tsx:import type { GameResults } from '../components/StrategyPlayHost';
src/demo/DigitaliseringsstrategiDemo.tsx:import { type GameManifest } from '../types/game-manifest';
src/demo/DigitaliseringsstrategiDemo.tsx:import { GameContainer } from '../components/GameContainer';
src/demo/DigitaliseringsstrategiDemo.tsx:import { UsernameModal } from '../components/UsernameModal';
src/demo/DigitaliseringsstrategiDemo.tsx:import demoGameData from '../../examples/digitaliseringsstrategi-demo.json';
src/components/ErrorBoundary.tsx:import React, { Component } from 'react';
src/components/ErrorBoundary.tsx:import type { ErrorInfo, ReactNode } from 'react';
src/components/ErrorBoundary.tsx:import { Box, Button, Heading, Text, VStack, Alert, AlertIcon } from '@chakra-ui/react';
src/components/ErrorBoundary.tsx:import { captureError } from '../services/error-monitoring';
src/components/Button/MunicipalButton.test.tsx:import React from 'react';
src/components/Button/MunicipalButton.test.tsx:import { render, screen, fireEvent } from '@testing-library/react';
src/components/Button/MunicipalButton.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/components/Button/MunicipalButton.test.tsx:import { MunicipalButton } from './MunicipalButton';
src/components/Button/MunicipalButton.test.tsx:import { createChakraTheme } from '../../theme/ChakraThemeProvider';
src/components/Button/MunicipalButtonExamples.tsx:import React from 'react';
src/components/Button/MunicipalButtonExamples.tsx:import { VStack, HStack, Text, Box, Divider } from '@chakra-ui/react';
src/components/Button/MunicipalButtonExamples.tsx:import { MunicipalButton } from './MunicipalButton';
src/components/Button/MunicipalButtonExamples.tsx:import { getButtonText } from '../../theme/municipalButtonTheme';
src/components/Button/MunicipalButton.tsx:import React from 'react';
src/components/Button/MunicipalButton.tsx:import { Button as ChakraButton, ButtonProps as ChakraButtonProps, forwardRef } from '@chakra-ui/react';
src/components/Button/MunicipalButton.tsx:import { motion } from 'framer-motion';
src/components/notifications/MunicipalToastNotification.tsx:import React, { useEffect, useState, useRef } from 'react';
src/components/notifications/MunicipalToastNotification.tsx:import { CloseIcon, CheckIcon, CertificateIcon, StarIcon } from '../icons/GameIcons';
src/components/notifications/MunicipalToastNotification.tsx:import { MunicipalAchievement } from '../../services/municipal-achievement-engine';
src/components/StrategyPlayHost.tsx:import React, { useState, useCallback, useMemo, useEffect } from 'react';
src/components/StrategyPlayHost.tsx:import { Box, Progress, VStack, Alert } from '@chakra-ui/react';
src/components/StrategyPlayHost.tsx:import type { GameManifest } from '../types/game-manifest';
src/components/StrategyPlayHost.tsx:import { InfoIcon } from './icons/GameIcons';
src/components/StrategyPlayHost.tsx:import { SkipLinks, SkipLink } from './common/SkipLink';
src/components/StrategyPlayHost.tsx:import { useFocusManagement } from '../hooks/useFocusManagement';
src/components/StrategyPlayHost.tsx:import { usePerformanceTracker } from '../hooks/usePerformanceTracker';
src/components/StrategyPlayHost.tsx:import { SceneTransition } from './animations/SceneTransition';
src/components/StrategyPlayHost.tsx:import { MunicipalToastNotification } from './notifications/MunicipalToastNotification';
src/components/StrategyPlayHost.tsx:import { MunicipalProgressIndicator, DefaultGDPRMilestones, getLocalizedMilestones } from './progress/MunicipalProgressIndicator';
src/components/StrategyPlayHost.tsx:import { useAnnaSvenssonAchievements } from '../hooks/useMunicipalAchievements';
src/components/StrategyPlayHost.tsx:import { ChakraThemeProvider } from '../theme/ChakraThemeProvider';
src/components/StrategyPlayHost.tsx:import { detectAndAdaptCultural, type CulturalContext } from '../middleware/CulturalAdaptation';
src/components/StrategyPlayHost.tsx:import { DialogueScene } from './DialogueScene/DialogueScene';
src/components/StrategyPlayHost.tsx:import { QuizScene } from './QuizScene/QuizScene';
src/components/StrategyPlayHost.tsx:import { AssessmentScene } from './scenes/AssessmentScene';
src/components/StrategyPlayHost.tsx:import { ResourceScene } from './scenes/ResourceScene';
src/components/StrategyPlayHost.tsx:import { SummaryScene } from './scenes/SummaryScene';
src/components/StrategyPlayHost.tsx:import { GameErrorBoundary } from './ErrorBoundary';
src/components/StrategyPlayHost.tsx:import { performanceAnalytics } from '../services/performance-analytics';
src/components/DialogueScene/DialogueScene.tsx:import React, { useState, useEffect, useMemo } from 'react';
src/components/DialogueScene/DialogueScene.tsx:import { motion } from 'framer-motion';
src/components/DialogueScene/DialogueScene.tsx:import { processDialogueSceneWithPlayerName } from '../../utils/playerNameReplacement';
src/components/DialogueScene/DialogueScene.tsx:import { MunicipalButton } from '../Button';
src/components/DialogueScene/DialogueScene.tsx:import { getButtonText } from '../../theme/municipalButtonTheme';
src/components/DialogueScene/DialogueScene.test.tsx:import React from 'react';
src/components/DialogueScene/DialogueScene.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/components/DialogueScene/DialogueScene.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/components/DialogueScene/DialogueScene.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/components/DialogueScene/DialogueScene.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/components/DialogueScene/DialogueScene.test.tsx:import { DialogueScene } from './DialogueScene';
src/components/accessibility/AchievementAccessibility.tsx:import React, { useEffect, useRef } from 'react';
src/components/loading/LoadingStates.tsx:import React from 'react';
src/components/loading/LoadingStates.tsx:import { LoadingSkeleton } from '../animations/SceneTransition';
src/components/loading/LoadingStates.tsx:import { RestartIcon, InfoIcon } from '../icons/GameIcons';
src/components/auth/LoginForm.tsx:import React, { useState } from 'react';
src/components/auth/LoginForm.tsx:import { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';
src/components/auth/LoginForm.tsx:import { useAuth } from '../../contexts/AuthContext';
src/components/auth/LoginForm.tsx:import type { LoginCredentials } from '../../types/auth';
src/components/auth/LoginForm.tsx:import { captureError } from '../../services/error-monitoring';
src/components/auth/LoginForm.tsx:import { usePerformanceTracker } from '../../hooks/usePerformanceTracker';
src/components/auth/ProtectedRoute.tsx:import React from 'react';
src/components/auth/ProtectedRoute.tsx:import type { ReactNode } from 'react';
src/components/auth/ProtectedRoute.tsx:import { Box, Spinner, Alert, AlertIcon, Text, Button, VStack } from '@chakra-ui/react';
src/components/auth/ProtectedRoute.tsx:import { useAuth } from '../../contexts/AuthContext';
src/components/auth/ProtectedRoute.tsx:import type { Permission, UserRole } from '../../types/auth';
src/components/auth/ProtectedRoute.tsx:import { LoginForm } from './LoginForm';
src/components/animations/CelebrationEffects.tsx:import React, { useEffect, useState } from 'react';
src/components/animations/CelebrationEffects.tsx:import { Box } from '@chakra-ui/react';
src/components/animations/CelebrationEffects.tsx:import { useAnimations } from '../../hooks/useAnimations';
src/components/animations/SceneTransition.tsx:import React from 'react';
src/components/animations/SceneTransition.tsx:import { Box } from '@chakra-ui/react';
src/components/animations/SceneTransition.tsx:import { useAnimations } from '../../hooks/useAnimations';
src/components/QuizScene/QuizScene.test.tsx:import React from 'react';
src/components/QuizScene/QuizScene.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/components/QuizScene/QuizScene.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/components/QuizScene/QuizScene.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/components/QuizScene/QuizScene.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/components/QuizScene/QuizScene.test.tsx:import { QuizScene } from './QuizScene';
src/components/QuizScene/QuizScene.tsx:import React, { useState, useEffect, useMemo } from 'react';
src/components/QuizScene/QuizScene.tsx:import { motion, AnimatePresence } from 'framer-motion';
src/components/QuizScene/QuizScene.tsx:import { processQuizSceneWithPlayerName } from '../../utils/playerNameReplacement';
src/components/QuizScene/QuizScene.tsx:import { MunicipalButton } from '../Button';
src/components/QuizScene/QuizScene.tsx:import { getButtonText } from '../../theme/municipalButtonTheme';
src/components/QuizScene/QuizOptionTextFix.test.tsx:import React from 'react';
src/components/QuizScene/QuizOptionTextFix.test.tsx:import { render, screen, fireEvent } from '@testing-library/react';
src/components/QuizScene/QuizOptionTextFix.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/components/QuizScene/QuizOptionTextFix.test.tsx:import { QuizScene } from './QuizScene';
src/components/QuizScene/QuizOptionTextFix.test.tsx:import { vi } from 'vitest';
src/components/icons/GameIcons.tsx:import React from 'react';
src/components/icons/GameIcons.tsx:import { Icon } from '@chakra-ui/react';
src/components/UsernameModal/UsernameModal.tsx:import React, { useState, useRef, useEffect } from 'react';
src/components/progress/MunicipalProgressIndicator.tsx:import React, { useState } from 'react';
src/components/progress/MunicipalProgressIndicator.tsx:import { CheckIcon, StarIcon } from '../icons/GameIcons';
src/components/common/Avatar.tsx:import React from 'react';
src/components/common/Avatar.tsx:import { Avatar as ChakraAvatar, Box } from '@chakra-ui/react';
src/components/common/SkipLink.tsx:import React from 'react';
src/components/common/SkipLink.tsx:import { Box, Link } from '@chakra-ui/react';
src/components/scenes/ResourceScene.tsx:import React from 'react';
src/components/scenes/ResourceScene.tsx:import { Box, Text, Button } from '@chakra-ui/react';
src/components/scenes/ResourceScene.tsx:import type { ResourceScene as ResourceSceneType } from '../../types/game-manifest';
src/components/scenes/DialogueScene.tsx:import React, { useState, useEffect } from 'react';
src/components/scenes/DialogueScene.tsx:import { NextIcon } from '../icons/GameIcons';
src/components/scenes/DialogueScene.tsx:import { CharacterAvatar } from '../common/Avatar';
src/components/scenes/DialogueScene.tsx:import type { DialogueScene as DialogueSceneType } from '../../types/game-manifest';
src/components/scenes/QuizScene.tsx:import React, { useState } from 'react';
src/components/scenes/QuizScene.tsx:import type { QuizScene as QuizSceneType } from '../../types/game-manifest';
src/components/scenes/QuizScene.tsx:import { CheckIcon, CloseIcon } from '../icons/GameIcons';
src/components/scenes/QuizScene.tsx:import { ButtonFeedback } from '../animations/CelebrationEffects';
src/components/scenes/QuizScene.tsx:import { useAnimations } from '../../hooks/useAnimations';
src/components/scenes/SummaryScene.tsx:import React, { useState, useEffect } from 'react';
src/components/scenes/SummaryScene.tsx:import type { SummaryScene as SummarySceneType } from '../../types/game-manifest';
src/components/scenes/SummaryScene.tsx:import { CheckIcon, StarIcon, ClockIcon, CertificateIcon } from '../icons/GameIcons';
src/components/scenes/SummaryScene.tsx:import { validateMunicipalBranding, getMunicipalThemeOverrides, type MunicipalBranding } from '../../utils/municipalBranding';
src/components/scenes/AssessmentScene.tsx:import React, { useState, useEffect } from 'react';
src/components/scenes/AssessmentScene.tsx:import type { AssessmentScene as AssessmentSceneType } from '../../types/game-manifest';
src/components/scenes/AssessmentScene.tsx:import { CheckIcon, StarIcon, CertificateIcon } from '../icons/GameIcons';
src/components/admin/ContentWorkflows.tsx:import React, { useState, useCallback } from 'react';
src/components/admin/ContentWorkflows.tsx:import { InfoIcon } from '@chakra-ui/icons';
src/components/admin/AdminAuth.tsx:import React, { useState } from 'react';
src/components/admin/AdminAuth.tsx:import { ChakraThemeProvider } from '../../theme/ChakraThemeProvider';
src/components/admin/EnterpriseAdminCore.tsx:import React, { useState } from 'react';
src/components/admin/AdminApp.tsx:import React, { useState } from 'react';
src/components/admin/AdminApp.tsx:import { AdminAuth } from './AdminAuth';
src/components/admin/AdminApp.tsx:import { AdminDashboard } from './AdminDashboard';
src/components/admin/AdminDashboard.tsx:import React, { useState } from 'react';
src/components/admin/AdminDashboard.tsx:import { useRealTimeMetrics } from '../../hooks/useRealTimeMetrics';
src/components/GameContainer/GameContainer.test.tsx:import React from 'react';
src/components/GameContainer/GameContainer.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/components/GameContainer/GameContainer.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/components/GameContainer/GameContainer.test.tsx:import { GameContainer, GameContainerProps } from './GameContainer';
src/components/GameContainer/GameContainer.test.tsx:import { EnhancedErrorBoundary } from './EnhancedErrorBoundary';
src/components/GameContainer/GameContainer.tsx:import React from 'react';
src/components/GameContainer/GameContainer.tsx:import { motion, AnimatePresence } from 'framer-motion';
src/components/GameContainer/GameContainer.tsx:import { EnhancedErrorBoundary } from './EnhancedErrorBoundary';
src/components/GameContainer/EnhancedErrorBoundary.tsx:import React, { Component, ReactNode, ErrorInfo } from 'react';
src/components/GameContainer/EnhancedErrorBoundary.tsx:import { motion } from 'framer-motion';
src/contexts/AuthContext.tsx:import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
src/contexts/AuthContext.tsx:import { captureError } from '../services/error-monitoring';
src/contexts/AuthContext.tsx:import { performanceAnalytics } from '../services/performance-analytics';
src/services/municipal-integration-apis.ts:import { AxiosResponse } from 'axios';
src/services/game-state-manager.tsx:import React from 'react';
src/services/game-state-manager.tsx:import { supabase } from '../lib/supabase';
src/services/enterprise-sso.ts:import { SAML } from '@node-saml/node-saml';
src/services/analytics.ts:import React from 'react';
src/theme/defaultTheme.ts:import type { ThemeConfig } from '../types/game-manifest';
src/theme/ThemeProvider.tsx:import React, { createContext, useContext, useEffect, useMemo } from 'react';
src/theme/ThemeProvider.tsx:import type { ThemeConfig } from '../types/game-manifest';
src/theme/ThemeProvider.tsx:import { defaultTheme } from './defaultTheme';
src/theme/ThemeProvider.tsx:import { applyTheme } from './themeUtils';
src/theme/themeUtils.ts:import type { ThemeConfig } from '../types/game-manifest';
src/theme/municipalButtonTheme.ts:import { defineStyleConfig } from '@chakra-ui/react';
src/theme/ChakraThemeProvider.tsx:import React from 'react';
src/theme/ChakraThemeProvider.tsx:import { ChakraProvider, extendTheme } from '@chakra-ui/react';
src/theme/ChakraThemeProvider.tsx:import type { ThemeConfig } from '../types/game-manifest';
src/theme/ChakraThemeProvider.tsx:import { defaultTheme } from './defaultTheme';
src/theme/ChakraThemeProvider.tsx:import { municipalButtonTheme } from './municipalButtonTheme';
src/middleware/PerformanceMonitoring.ts:import { Request, Response, NextFunction } from 'express';
src/middleware/PerformanceMonitoring.ts:import { performance } from 'perf_hooks';
src/stories/ComponentShowcase.tsx:import React, { useState } from 'react';
src/stories/ComponentShowcase.tsx:import { ChakraThemeProvider } from '../theme/ChakraThemeProvider';
src/stories/ComponentShowcase.tsx:import { CharacterAvatar, municipalAvatars } from '../components/common/Avatar';
src/stories/ComponentShowcase.tsx:import { SkipLink } from '../components/common/SkipLink';
src/stories/ComponentShowcase.tsx:import { LoadingState, SceneLoadingSkeleton, NetworkErrorState } from '../components/loading/LoadingStates';
src/stories/ComponentShowcase.tsx:import { CelebrationEffects, ButtonFeedback } from '../components/animations/CelebrationEffects';
src/hooks/useFocusManagement.ts:import { useEffect, useRef } from 'react';
src/hooks/usePerformanceTracker.ts:import { useEffect, useCallback, useRef } from 'react';
src/hooks/usePerformanceTracker.ts:import { captureMetric, capturePerformanceIssue } from '../services/error-monitoring';
src/hooks/useAnimations.ts:import { useEffect, useState } from 'react';
src/hooks/useMunicipalAchievements.ts:import { useState, useEffect, useCallback, useRef } from 'react';
src/hooks/useMunicipalAchievements.ts:import { type MunicipalAchievement } from '../components/notifications/MunicipalToastNotification';
src/hooks/useRealTimeMetrics.ts:import { useState, useEffect, useCallback } from 'react';
src/hooks/useRealTimeMetrics.ts:import { analyticsService, type TenantMetrics, type UserActivity } from '../services/analytics';
src/api/devteam-integration.ts:import { z } from 'zod';
src/api/devteam-integration.ts:import { validateGameManifest } from '../utils/contentValidation';
src/api/devteam-integration.ts:import { applyMunicipalBrandingToManifest, validateMunicipalBranding, getMunicipalContext } from '../utils/municipalBranding';
src/api/devteam-integration.ts:import { processGameManifestWithPlayerName } from '../utils/playerNameReplacement';
src/api/devteam-integration.test.ts:import { validateGameManifest } from '../utils/contentValidation';
src/api/routes/devteam.ts:import { Router, Request, Response } from 'express';
src/api/routes/devteam.ts:import { ZodError } from 'zod';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import React from 'react';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/tests/components/dialogue/SmsStyleDialogue.test.tsx:import { DialogueScene } from '../../../components/DialogueScene/DialogueScene';
src/tests/components/quiz/QuizResponseText.test.tsx:import React from 'react';
src/tests/components/quiz/QuizResponseText.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/quiz/QuizResponseText.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/tests/components/quiz/QuizResponseText.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/tests/components/quiz/QuizResponseText.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/tests/components/quiz/QuizResponseText.test.tsx:import { QuizScene } from '../../../components/QuizScene/QuizScene';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import React from 'react';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { MunicipalToastNotification, MunicipalAchievementCategories } from '../../../components/notifications/MunicipalToastNotification';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { MunicipalProgressIndicator, DefaultGDPRMilestones } from '../../../components/progress/MunicipalProgressIndicator';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { MunicipalAchievementEngine, createMunicipalAchievementEngine } from '../../../services/municipal-achievement-engine';
src/tests/components/achievements/MunicipalAchievementSystem.test.tsx:import { useMunicipalAchievements } from '../../../hooks/useMunicipalAchievements';
src/tests/components/scenes/QuizScene.test.tsx:import React from 'react';
src/tests/components/scenes/QuizScene.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/scenes/QuizScene.test.tsx:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/tests/components/scenes/QuizScene.test.tsx:import { QuizScene } from '../../../components/scenes/QuizScene';
src/tests/components/scenes/QuizScene.test.tsx:import { ChakraThemeProvider } from '../../../theme/ChakraThemeProvider';
src/tests/components/scenes/QuizScene.test.tsx:import type { QuizScene as QuizSceneType } from '../../../types/game-manifest';
src/tests/components/scenes/DialogueScene.test.tsx:import React from 'react';
src/tests/components/scenes/DialogueScene.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/scenes/DialogueScene.test.tsx:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/tests/components/scenes/DialogueScene.test.tsx:import { DialogueScene } from '../../../components/scenes/DialogueScene';
src/tests/components/scenes/DialogueScene.test.tsx:import { ChakraThemeProvider } from '../../../theme/ChakraThemeProvider';
src/tests/components/scenes/DialogueScene.test.tsx:import type { DialogueScene as DialogueSceneType } from '../../../types/game-manifest';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import { SummaryScene } from '../../../components/scenes/SummaryScene';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import type { SummaryScene as SummarySceneType } from '../../../types/game-manifest';
src/tests/components/scenes/SummaryScene.municipal.test.tsx:import type { MunicipalBranding } from '../../../utils/municipalBranding';
src/tests/components/StrategyPlayHost.test.tsx:import React from 'react';
src/tests/components/StrategyPlayHost.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/components/StrategyPlayHost.test.tsx:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/tests/components/StrategyPlayHost.test.tsx:import { StrategyPlayHost } from '../../components/StrategyPlayHost';
src/tests/components/StrategyPlayHost.test.tsx:import { ChakraThemeProvider } from '../../theme/ChakraThemeProvider';
src/tests/components/StrategyPlayHost.test.tsx:import type { GameManifest } from '../../types/game-manifest';
src/tests/integration/game-flow.test.tsx:import React from 'react';
src/tests/integration/game-flow.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/integration/game-flow.test.tsx:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/tests/integration/game-flow.test.tsx:import { StrategyPlayHost } from '../../components/StrategyPlayHost';
src/tests/integration/game-flow.test.tsx:import { ChakraThemeProvider } from '../../theme/ChakraThemeProvider';
src/tests/integration/game-flow.test.tsx:import type { GameManifest } from '../../types/game-manifest';
src/tests/layout/GameContainer.test.tsx:import React from 'react';
src/tests/layout/GameContainer.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/layout/GameContainer.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/tests/layout/GameContainer.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/tests/layout/GameContainer.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/tests/AdminDashboard.test.tsx:import React from 'react';
src/tests/AdminDashboard.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/AdminDashboard.test.tsx:import { AdminDashboard } from '../components/admin/AdminDashboard';
src/tests/AdminDashboard.test.tsx:import { ChakraThemeProvider } from '../theme/ChakraThemeProvider';
src/tests/accessibility/wcag.test.tsx:import React from 'react';
src/tests/accessibility/wcag.test.tsx:import { render, screen, fireEvent } from '@testing-library/react';
src/tests/accessibility/wcag.test.tsx:import { describe, it, expect, vi } from 'vitest';
src/tests/accessibility/wcag.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/tests/accessibility/wcag.test.tsx:import { StrategyPlayHost } from '../../components/StrategyPlayHost';
src/tests/accessibility/wcag.test.tsx:import { DialogueScene } from '../../components/scenes/DialogueScene';
src/tests/accessibility/wcag.test.tsx:import { QuizScene } from '../../components/scenes/QuizScene';
src/tests/accessibility/wcag.test.tsx:import { DialogueScene as NewDialogueScene } from '../../components/DialogueScene/DialogueScene';
src/tests/accessibility/wcag.test.tsx:import { QuizScene as NewQuizScene } from '../../components/QuizScene/QuizScene';
src/tests/accessibility/wcag.test.tsx:import { AdminDashboard } from '../../components/admin/AdminDashboard';
src/tests/accessibility/wcag.test.tsx:import { ChakraThemeProvider } from '../../theme/ChakraThemeProvider';
src/tests/accessibility/wcag.test.tsx:import type { GameManifest, DialogueScene as DialogueSceneType, QuizScene as QuizSceneType } from '../../types/game-manifest';
src/tests/performance/load.test.ts:import { describe, it, expect, vi, beforeEach } from 'vitest';
src/tests/AdminDashboard.test.simple.tsx:import React from 'react';
src/tests/AdminDashboard.test.simple.tsx:import { render, screen } from '@testing-library/react';
src/tests/AdminDashboard.test.simple.tsx:import { describe, it, expect, vi } from 'vitest';
src/tests/setup.ts:import { vi } from 'vitest';
src/tests/errorhandling/EnhancedErrorBoundary.test.tsx:import React from 'react';
src/tests/errorhandling/EnhancedErrorBoundary.test.tsx:import { render, screen, fireEvent, waitFor } from '@testing-library/react';
src/tests/errorhandling/EnhancedErrorBoundary.test.tsx:import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
src/tests/errorhandling/EnhancedErrorBoundary.test.tsx:import { axe, toHaveNoViolations } from 'jest-axe';
src/tests/errorhandling/EnhancedErrorBoundary.test.tsx:import { ChakraProvider } from '@chakra-ui/react';
src/main.tsx:import { StrictMode } from 'react'
src/main.tsx:import { createRoot } from 'react-dom/client'
src/main.tsx:import App from './App.tsx'
src/main.tsx:import { ErrorBoundary } from './components/ErrorBoundary'
src/main.tsx:import { AuthProvider } from './contexts/AuthContext'
src/main.tsx:import { errorMonitoring } from './services/error-monitoring'
src/main.tsx:import { performanceAnalytics } from './services/performance-analytics'
src/App.tsx:import { useState } from 'react';
src/App.tsx:import { Box, VStack, Heading, Text, Button, HStack, Badge, Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalCloseButton, useDisclosure, IconButton } from '@chakra-ui/react';
src/App.tsx:import { StrategyPlayHost } from './components/StrategyPlayHost';
src/App.tsx:import type { GameResults } from './components/StrategyPlayHost';
src/App.tsx:import type { GameManifest } from './types/game-manifest';
src/App.tsx:import sampleGame from './examples/sample-game.json';
src/App.tsx:import { DevShowcase } from './dev/DevShowcase';
src/App.tsx:import { DigitaliseringsstrategiDemo } from './demo/DigitaliseringsstrategiDemo';
src/App.tsx:import { AdminApp } from './components/admin/AdminApp';
src/App.tsx:import { useMonitoringDashboard } from './utils/monitoring-dashboard';
src/App.tsx:import { useAuth } from './contexts/AuthContext';
src/App.tsx:import { GameProtectedRoute } from './components/auth/ProtectedRoute';
